openapi: "3.0.0"
info:
  description: "This document contains information about the endpoints exposed by CoreTemplateStudio's Engine 
  API. This API is used to expose functionality provided by the engine to other applications that will be built
  on top of this, including Windows Template Studio (WinTS) and Web Template Studio (WebTS)"
  version: "1.0.0"
  title: "CoreTemplateStudio Engine API"
  contact:
    email: "t-dadua@microsoft.com"
servers:
- url: "http://localhost:5000/api"
  description: "local server to connect with the engine"
tags:
- name: "sync"
  description: "Endpoints to sync templates with CDN/vsix or local template folder, must be called before calling any other endpoints!"
- name: "project type"
  description: "Information about available project types"
- name: "framework"
  description: "Information about available frameworks"
- name: "feature"
  description: "Information about available features"
- name: "page"
  description: "Information about available pages"
- name: "generate"
  description: "Endpoints to generate templates"
paths:
  /generate:
    post:
      tags:
      - "generate"
      summary: "Generate templates from user selections"
      description: "This endpoint parses and validates a JSON of user selections 
      from the request body and generates the templates accordingly"
      operationId: "generate"
      requestBody:
        description: "User selection as JSON. The selections are the keys 
        returned from other (information/detail) endpoints. Note that the
        backend/frontend can be *null* depending on the project. The selections
        are *case-insensitive*"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSelection'
      responses:
        200:
          $ref: '#/components/responses/GenerateResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /projectType:
    get:
      tags:
      - "project type"
      summary: "Gets available project types for the current platform and language"
      description: "This returns all the project types for the current platform and language. The parameters defined in sync will be used."
      operationId: "GetProjectType"
      responses:
        200:
          $ref: '#/components/responses/ProjectTypeResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /sync:
    post:
      tags:
      - "sync"
      summary: "Syncs templates with CDN/local vsix for the given platform"
      description: "Sync local templates with the updated templates for given platform. Use 'uwp' as 
      platform to sync for WinTS and 'web' for WebTS."
      operationId: "SyncTemplates"
      parameters:
      - in: "query"
        name: "platform"
        description: "Which platform to sync for. Can be either uwp (for WinTS) or web (for WebTS)."
        required: true
        schema:
          type: "string"
          enum:
          - "uwp"
          - "web"
      - in: query
        name: path
        description: >-
          Path to the vsix or templates folder.
        required: true
        schema:
          type: string
        example: ../../../..
      - in: query
        name: language
        description: >-
          Required for Uwp and ignored for Web.
        required: false
        schema:
          type: string
          enum:
          - C#
          - VB
      responses:
        200:
          $ref: '#/components/responses/SyncResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
  /framework:
    get:
      tags:
      - "framework"
      summary: "Get all frameworks for the current platform "
      description: "Returns frameworks for given current platform and language. Platform and language must first be defined
      in the POST /sync endpoint"
      operationId: "GetFrameworks"
      responses:
        200:
          $ref: '#/components/responses/FrameworksResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
  /framework/{frameworkType}:
    get:
      tags:
      - "framework"
      summary: "Get all frameworks matching the frameworkType for the current platform and language."
      description: "Returns frameworks of given frameworkType for the current platform and language. Platform and Language must
      first be defined in the POST /sync endpoint. WinTS should use /framework endpoint as there is only one type of framework in WinTS."
      operationId: "GetFrameworksOfType"
      parameters:
      - in: "path"
        name: "frameworkType"
        description: "Framework Type to display matching frameworks for. Can be frontend or backend for WebTS and
        uwpDesign for WinTS. Case-insensitive."
        required: true
        schema:
          type: "string"
          enum:
          - "frontend"
          - "backend"
          - "uwpDesign"
      responses:
        200:
          $ref: '#/components/responses/FrameworksResponseSpecific'
        400:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
  /page:
    get:
      tags:
      - "page"
      summary: "Get all valid pages for given frameworks "
      description: "Returns valid pages for multiple frameworks passed in query"
      operationId: "GetPagesForFrameworks"
      parameters:
      - in: "query"
        name: "frameworks"
        description: "Frameworks to return matching pages for. Provide both frontend and backend framework
        for web. This can be done as *`?frameworks=ReactJS&frameworks=NodeJS`*"
        required: true
        schema:
          type: "array"
          items:
            type: "string"
            example: "ReactJS"
      responses:
        200:
          $ref: '#/components/responses/FrameworksResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
  /feature:
    get:
      tags:
      - "feature"
      summary: "Get all valid features for given frameworks "
      description: "Returns valid feature for multiple frameworks passed in query"
      operationId: "GetFeaturesForFrameworks"
      parameters:
      - in: "query"
        name: "frameworks"
        description: "Frameworks to return matching features for. Provide both frontend and backend framework
        for web. This can be done as *`?frameworks=ReactJS&frameworks=NodeJS`*"
        required: true
        schema:
          type: "array"
          items:
            type: "string"
            example: "ReactJS"
      responses:
        200:
          $ref: '#/components/responses/FrameworksResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        404:
          $ref: '#/components/responses/ErrorResponse'
components:
  schemas:
    UserSelection:
      type: "object"
      properties:
        platform:
          type: "string"
        projectType:
          type: "string"
        frontend:
          type: "string"
        backend:
          type: "string"
        pages:
          type: "array"
          items:
            type: "string"
        features:
          type: "array"
          items:
            type: "string"
      example:
        {
          "platform": "Web",
          "projectType": "MultiPageFull",
          "frontend": "ReactJS",
          "backend": "NodeJS",
          "pages": ["blankWeb", "blog"],
          "features": ["azureDatabase", "azureFunctions"]
        }
  responses:
    FeatureResponse:
      description: "Success response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "array"
                items:
                  type: "object"
                  example: 
                    "AzureDatabase": {
                      "name": "Azure Database",
                      "description":"An Azure database feature for Web Applications",
                      "imagePath": "/icon.png"
                    }
                    "AzureKeyVault": {
                      "name": "Azure Key Vault",
                      "description":"An Azure key vault feature for Web Applications",
                      "imagePath": "/icon.png"
                    }
              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    PageResponse:
      description: "Success response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "array"
                items:
                  type: "object"
                  example: 
                    "BlankWeb": {
                      "name": "Blank",
                      "description":"A blank page for Web Applications",
                      "imagePath": "/icon.png"
                    }
                    "Home": {
                      "name": "Home",
                      "description":"A home page for Web Applications",
                      "imagePath": "/icon.png"
                    }
                    "News": {
                      "name": "News",
                      "description":"A news page for Web Applications",
                      "imagePath": "/icon.png"
                    }
              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    SyncResponse:
      description: "Success response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "object"
                properties:
                  wasUpdated:
                    type: "boolean"
              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    GenerateResponse:
      description: "Success response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "object"
                properties:
                  wasGenerated:
                    type: "boolean"
              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    ProjectTypeResponse:
      description: "Success response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "array"
                items:
                  type: "object"
                  example:
                    "items": [
                        {
                          "name": "FullstackWebApp",
                          "displayName": "Fullstack Web Application",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\projectTypes\\FullstackWebApp.xaml",
                          "summary": "An end to end web application, which includes frontend (e.g. React) backend (e.g. Node) and database.",
                          "description": "Fullstack Web Application project type details.",
                          "author": "Microsoft",
                          "order": 1,
                          "metadataType": 0,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                            "enabled": true
                          }
                        },
                        {
                          "name": "RestAPI",
                          "displayName": "Restful API",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\projectTypes\\RestAPI.xaml",
                          "summary": "A Restful API is a collection of endpoints connected to a database implemented in a backend framework such as Node.JS",
                          "description": "Restful API project type details.",
                          "author": "Microsoft",
                          "order": 2,
                          "metadataType": 0,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                            "enabled": true
                          }
                        }
                    ]

              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    FrameworksResponse:
      description: "Success response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "array"
                items:
                  type: "object"
                  example: 
                    "items" : [
                      {
                          "name": "ReactJS",
                          "displayName": "ReactJS",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\frameworks\\ReactJS.svg",
                          "summary": "React is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers.",
                          "description": "ReactJS Framework details.",
                          "author": "Microsoft",
                          "order": 1,
                          "metadataType": 1,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                              "type": "frontend",
                              "enabled": true
                          }
                      },
                      {
                          "name": "NodeJS",
                          "displayName": "NodeJS",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\frameworks\\NodeJS.svg",
                          "summary": "Node.js is a highly efficient and scalable non-blocking I/O platform that was build on top of Google Chrome V8 engine and its ECMAScript.",
                          "description": "ReactJS Framework details.",
                          "author": "Microsoft",
                          "order": 1,
                          "metadataType": 1,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                              "type": "backend",
                              "enabled": true
                          }
                      },
                      {
                          "name": "ASPNET",
                          "displayName": "ASP.NET",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\frameworks\\ASPNET.svg",
                          "summary": "ASP.NET is an open-source server-side web application framework designed for web development to produce dynamic web pages.",
                          "description": "ASP.NET Framework details",
                          "author": "Microsoft",
                          "order": 2,
                          "metadataType": 1,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                              "type": "backend",
                              "enabled": false
                          }
                      } 
                    ]
              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    FrameworksResponseSpecific:
      description: "Success response for frameworks/backend"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "array"
                items:
                  type: "object"
                  example: 
                    "items" : [
                      {
                          "name": "NodeJS",
                          "displayName": "NodeJS",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\frameworks\\NodeJS.svg",
                          "summary": "Node.js is a highly efficient and scalable non-blocking I/O platform that was build on top of Google Chrome V8 engine and its ECMAScript.",
                          "description": "ReactJS Framework details.",
                          "author": "Microsoft",
                          "order": 1,
                          "metadataType": 1,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                              "type": "backend",
                              "enabled": true
                          }
                      },
                      {
                          "name": "ASPNET",
                          "displayName": "ASP.NET",
                          "icon": "C:\\ProgramData\\CoreTemplateStudio\\Templates\\LocalEnv\\0.0.0.0\\_catalog\\frameworks\\ASPNET.svg",
                          "summary": "ASP.NET is an open-source server-side web application framework designed for web development to produce dynamic web pages.",
                          "description": "ASP.NET Framework details",
                          "author": "Microsoft",
                          "order": 2,
                          "metadataType": 1,
                          "licenses": "",
                          "licenseTerms": null,
                          "platforms": [
                              "Web"
                          ],
                          "languages": [
                              "Any"
                          ],
                          "tags": {
                              "type": "backend",
                              "enabled": false
                          }
                      } 
                    ]
              statusCode:
                type: "integer"
                example: 200
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
    ErrorResponse:
      description: "Error response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              value:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid input"
              statusCode:
                type: "integer"
                example: 400
              formatters:
                type: "array"
                items: 
                  type: "string"
              contentTypes:
                type: "array"
                items: 
                  type: "string"
              declaredType:
                type: "string"
externalDocs:
  description: "Core Template Studio Engine API documentation"
  url: "https://github.com/Microsoft/CoreTemplateStudio/blob/dev/code/src/CoreTemplateStudio/CoreTemplateStudio.Api/README.md"